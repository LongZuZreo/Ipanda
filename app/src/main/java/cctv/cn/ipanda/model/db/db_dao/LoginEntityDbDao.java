package cctv.cn.ipanda.model.db.db_dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOGIN_ENTITY_DB".
*/
public class LoginEntityDbDao extends AbstractDao<LoginEntityDb, Long> {

    public static final String TABLENAME = "LOGIN_ENTITY_DB";

    /**
     * Properties of entity LoginEntityDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Timestamp = new Property(1, String.class, "timestamp", false, "TIMESTAMP");
        public final static Property Ticket = new Property(2, String.class, "ticket", false, "TICKET");
        public final static Property ErrType = new Property(3, String.class, "errType", false, "ERR_TYPE");
        public final static Property ErrMsg = new Property(4, String.class, "errMsg", false, "ERR_MSG");
        public final static Property UserSeqId = new Property(5, String.class, "userSeqId", false, "USER_SEQ_ID");
        public final static Property Usrid = new Property(6, String.class, "usrid", false, "USRID");
    }


    public LoginEntityDbDao(DaoConfig config) {
        super(config);
    }
    
    public LoginEntityDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOGIN_ENTITY_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TIMESTAMP\" TEXT," + // 1: timestamp
                "\"TICKET\" TEXT," + // 2: ticket
                "\"ERR_TYPE\" TEXT," + // 3: errType
                "\"ERR_MSG\" TEXT," + // 4: errMsg
                "\"USER_SEQ_ID\" TEXT," + // 5: userSeqId
                "\"USRID\" TEXT);"); // 6: usrid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOGIN_ENTITY_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LoginEntityDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(2, timestamp);
        }
 
        String ticket = entity.getTicket();
        if (ticket != null) {
            stmt.bindString(3, ticket);
        }
 
        String errType = entity.getErrType();
        if (errType != null) {
            stmt.bindString(4, errType);
        }
 
        String errMsg = entity.getErrMsg();
        if (errMsg != null) {
            stmt.bindString(5, errMsg);
        }
 
        String userSeqId = entity.getUserSeqId();
        if (userSeqId != null) {
            stmt.bindString(6, userSeqId);
        }
 
        String usrid = entity.getUsrid();
        if (usrid != null) {
            stmt.bindString(7, usrid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LoginEntityDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindString(2, timestamp);
        }
 
        String ticket = entity.getTicket();
        if (ticket != null) {
            stmt.bindString(3, ticket);
        }
 
        String errType = entity.getErrType();
        if (errType != null) {
            stmt.bindString(4, errType);
        }
 
        String errMsg = entity.getErrMsg();
        if (errMsg != null) {
            stmt.bindString(5, errMsg);
        }
 
        String userSeqId = entity.getUserSeqId();
        if (userSeqId != null) {
            stmt.bindString(6, userSeqId);
        }
 
        String usrid = entity.getUsrid();
        if (usrid != null) {
            stmt.bindString(7, usrid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LoginEntityDb readEntity(Cursor cursor, int offset) {
        LoginEntityDb entity = new LoginEntityDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // timestamp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ticket
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // errType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // errMsg
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userSeqId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // usrid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LoginEntityDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTimestamp(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTicket(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setErrType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setErrMsg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserSeqId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUsrid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LoginEntityDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LoginEntityDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LoginEntityDb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
